<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-07-12T11:08:59-04:00</updated><id>http://localhost:4000/feed.xml</id><entry><title type="html">Tips for Typing in Malayalam</title><link href="http://localhost:4000/blog/2020/06/14/Malayalam_Keyboarding.html" rel="alternate" type="text/html" title="Tips for Typing in Malayalam" /><published>2020-06-14T00:00:00-04:00</published><updated>2020-06-14T00:00:00-04:00</updated><id>http://localhost:4000/blog/2020/06/14/Malayalam_Keyboarding</id><content type="html" xml:base="http://localhost:4000/blog/2020/06/14/Malayalam_Keyboarding.html">&lt;figure&gt;
  &lt;img src=&quot;/media/D3_Maps/Manhattan.png&quot;&gt;
&lt;/figure&gt;

&lt;h2&gt;Let's have a go at it&lt;/h2&gt;

&lt;p&gt;Malayalam has an elegant alphabet that cannot be confined to a single keyboard. A triple keyboard gets close but even then there are characters that are not inputtable with a single button press. When I first started typing in Malayalam I struggled to find many characters and didn't realize that a lot of them aren't on the keyboard at all. Even with the progress I've made it is still a time consuming process. I can't type with all my fingers, rather I click on characters individually.&lt;/p&gt;

&lt;p&gt;I use a few websites to speed up the process. The first is GOOGLE TRANSLATE which uses a sequence to sequence model to translate betweeen English. It can be fairly reliable for finding the base version of a verb and simple phrase combinations when given an English input. The more accurate method is to provide a Malayalam input and verify that the English translate is reasonable. For that I use OLAM, an English to Malayalam dictionary.&lt;/p&gt;

&lt;p&gt;There will always be an adverb or phrase combination thats too difficult for me to express to a computer. For these cases I turn to manually typing. My keyboard of choice is BRANAH MALAYALAM. I'm sure that native speakers can zip through with this but I was confused as heck the first time I used it.&lt;/p&gt;

&lt;p&gt;The keyboard has 3 layers. The first layer has vowels on the top left and consonants. The second layer is accessed by clicking shift and the third is accessed by clicking control. A fourth layer can be accessed by clicking shift and control but its empty for Malayalam. This leads me to believe there are languages that have even more characters and I wish their speakers all the best.&lt;p&gt;

&lt;p&gt;Stressed consonants and vowels&lt;/p&gt;

https://jilljuck.com/funny-malayalam-jokes
     
&lt;a href=&quot;https://github.com/jchakko/D3_Manhattan&quot;&gt;Link's up!&lt;/a&gt;</content><author><name></name></author><category term="blog" /><summary type="html"></summary></entry><entry><title type="html">Cleric Spells</title><link href="http://localhost:4000/blog/2020/06/06/Selenium.html" rel="alternate" type="text/html" title="Cleric Spells" /><published>2020-06-06T00:00:00-04:00</published><updated>2020-06-06T00:00:00-04:00</updated><id>http://localhost:4000/blog/2020/06/06/Selenium</id><content type="html" xml:base="http://localhost:4000/blog/2020/06/06/Selenium.html">&lt;p&gt;Clerics are awesome. They can fill many roles and playstyles from backline to the front. I had trouble finding my footing when I first started playing because I had some misconceptions about what a cleric should do. While clerics have the ability to heal it isn't a good use of tempo. On one turn I can heal about 8 HP which isn't helpful when my paladin is getting hit for 26 damage. Once I realized what the better spells are I realized how powerful clerics truly are.&lt;/p&gt;

&lt;h2&gt;Cantrips&lt;/h2&gt;
&lt;p&gt;Cantrips can be cast an unlimited number of times. They can't be changed so its very easy to get stuck with a bunch of bad ones. Even if thats the situation you're stuck in, eventually you'll get a 4th one and you can pick up Guidance. It's too powerful to pass up. Guidance lets people roll a d4 when doing an ability check. A lot of things require ability checks like jumping chasms, lockpicking, persuasion. I spam guidance out of combat because.&lt;/p&gt;

&lt;p&gt;I like the idea of Thaumaturgy but it rarely sees use. My DM Ricardo runs a flavorful campaign and I always look for opportunities to act a fool and even then its hard to find usage for it. Spare the Dying is outclassed by a level 1 spell called Healing Word. The last cantrip I have is Sacred Flame which is basically a normal hit.&lt;/p&gt;

&lt;h2&gt;Proaction Over Reaction&lt;/h2&gt;

&lt;p&gt;Like I said earlier, healing damage that has already been dealt is not a good use of time. Its better to prevent the damage from happening in the first place. This makes Bless a very powerful cleric spell. It grants 3 creatures an extra d4 dice on attack rolls and saving throws. Simply put it makes the party more accurate when attacking and more likely to avoid harmful effects. This spell stands head and shoulder over the other level one options for a few reasons. It works on 3 players, it doesn't have some prerequesite for the d4 to be rolled, and it does not disappear when the target attacks. Bless is so powerful that I build my strategy around this spell.&lt;/p&gt;

&lt;h2&gt;Focus Your Mind&lt;/h2&gt;

&lt;p&gt;There are a few different spell cast types. Bless is concentration. Concentration spells break when casting another concentration spell or failing a constitution save after taking damage. Since I want bless up all the time I stay strapped with non concentration spells. Some good options are Healing Word, Guiding Bolt, Inflict Wounds, Aid, and Sanctuary. Healing Word is as bonus action that can ressurect people from a distance. Guiding Bolt deals damage and makes the next hit against the same target more accurate. Inflict wounds is 3d10s of nectrotic damage and Aid gives a session long HP increase to multiple party members. Sanctuary makes an ally harder to hit which in theory can be combined with other dodge improvements to make a friend unhittable. Then there's Spiritual Weapon.&lt;/p&gt;

&lt;p&gt;Spiritual Weapon is a bonus cast spell that creats a floating, movable weapon as a bonus action. It only takes one spell slot to cast then it can be used to melee attack from long range as a bonus action. It does not interfere with Bless, its empowered by it. This combined with ordinary attacking puts out some real damage. It also makes playing more fun. My party does not have a strong front line. Discovering this spell made me realize that I can stand in the front and fight. After the mace comes the spiritual mace and with Bless, both are going to hit.&lt;/p&gt;

&lt;h2&gt;A Life Beyond Bless&lt;/h2&gt;

&lt;p&gt;Bless is not the end all be all Cleric spell. Even if it was it would get boring to cast all of the time. In future sessions I'm looking cast Silence and Spirit Guardians as soon as I get 3rd Level Spells. Silence wrecks other spellcasters because most spells have a speaking component. Spirit Guardians slows and batters enemies around the caster. There was a time when I healed as a Cleric, now I don't have the time.&lt;/p&gt;</content><author><name></name></author><category term="blog" /><summary type="html">Clerics are awesome. They can fill many roles and playstyles from backline to the front. I had trouble finding my footing when I first started playing because I had some misconceptions about what a cleric should do. While clerics have the ability to heal it isn't a good use of tempo. On one turn I can heal about 8 HP which isn't helpful when my paladin is getting hit for 26 damage. Once I realized what the better spells are I realized how powerful clerics truly are.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/media/D3_Maps/Manhattan.png" /><media:content medium="image" url="http://localhost:4000/media/D3_Maps/Manhattan.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">A Simple BeautifulSoup Example</title><link href="http://localhost:4000/blog/2020/05/22/Beautiful_Soup.html" rel="alternate" type="text/html" title="A Simple BeautifulSoup Example" /><published>2020-05-22T00:00:00-04:00</published><updated>2020-05-22T00:00:00-04:00</updated><id>http://localhost:4000/blog/2020/05/22/Beautiful_Soup</id><content type="html" xml:base="http://localhost:4000/blog/2020/05/22/Beautiful_Soup.html">&lt;p&gt;There is so much data available on the internet - even if it isn't always in an analysis friendly format. The results of any modern sports tournament are hosted somewhere. Countless blog posts and movie reviews are available to the public free of charge. This information can be extracted programmatically allowing researchers to build large datasets without tedious manual input.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.crummy.com/software/BeautifulSoup/bs4/doc/&quot;&gt;BeautifulSoup&lt;/a&gt; is a web scraper Python library that makes it a snap to request HTML pages and parse the information on them. With a few short loops, information hosted on a web page is organized into a luxurious CSV or JSON file. Scraping a set of web pages has 2 parts: how do I extract the information on an individual page and how do I get the set of pages to parse from?&lt;/p&gt;

&lt;p&gt; It comes down to pattern recognition and using the element inspector. The user score could have its own div. The URLs of each page may only differ by a date or city name. Better yet, there could be a page that contains the URL for every episode of a TV series. Each situation is going to be different so let's take a look at a simple use case.&lt;/p&gt;

&lt;h2&gt;Collecting a list of National Parks&lt;/h2&gt;

&lt;p&gt;For this example I am going to scrape the &lt;a href=&quot;https://www.nps.gov&quot;&gt;National Park Service&lt;/a&gt; website to create a dictionary of all listed parks and their individual URLs. I start by extracting the information from a single page with the assumption that most of the pages will have the same format.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/media/BeautifulSoup/Vermont.png&quot;&gt;
  &lt;figcaption&gt;Vermont's Park Service Page&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The orange boxes show the indvidual entries and the green box is a container that holds all of them. Now its time to use the page inspector to find a way for BeautifulSoup to parse these locations. The green box has id=&quot;parkListResultsArea&quot;. The orange boxes are links surrounded by h3 tags within the parkListResultsArea.&lt;/p&gt;

&lt;h3&gt;Extract parks from Vermont's page&lt;/h3&gt;

&lt;pre&gt;
  &lt;code&gt;
    from bs4 import BeautifulSoup
    import requests

    url = &quot;https://www.nps.gov/state/vt/index.htm&quot;
    soup = BeautifulSoup(requests.get(url).content)

    vermont = soup.find(id = &quot;parkListResultsArea&quot;)
    parks = vermont.find_all('h3')

    for park in parks:
        link = park.find('a')
        print(link.get_text())
  &lt;/code&gt;
&lt;/pre&gt;

&lt;h3&gt;Output&lt;/h3&gt;
&lt;pre&gt;
  &lt;code&gt;
    Appalachian
    Marsh - Billings - Rockefeller
    North Country
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;The scraper returns the desired information from a single page. Now let's expand the code to retrieve information from multiple pages. I created a function that takes a url and executes the scraping logic. With a simple loop I can call the function for multiple states. I also added a function that takes the information from each park and transforms it into a dictionary.&lt;/p&gt;

&lt;h3&gt;Helper Functions&lt;/h3&gt;
&lt;pre&gt;
  &lt;code&gt;
    # Retrieve all parks from a state's page
    def parse_state(url):
        soup = BeautifulSoup(requests.get(url).content)
        state = soup.find(id = &quot;parkListResultsArea&quot;)
        parks = state.find_all('h3')
        return parks

    # Transfrom a BeautifulSoup tag to a dictionary of park information
    def parse_park(park, state):
        tag = park.find('a')
        url = tag['href']
        name = tag.get_text()
        park_dict = {&quot;Name&quot;: name, &quot;State&quot;: state, &quot;URL&quot;: url}
        return park_dict
  &lt;/code&gt;
&lt;/pre&gt;

&lt;h3&gt;Main&lt;/h3&gt;
&lt;pre&gt;
  &lt;code&gt;	

    # Full results container
    results = []

    url = &quot;https://www.nps.gov/state/PLACEHOLDER/index.htm&quot;
    states = [&quot;vt&quot;, &quot;de&quot;, &quot;wi&quot;]

    # For every state in the above list
    for state in states:
        # Retrieve all parks from the state's page
        state_url = url.replace(&quot;PLACEHOLDER&quot;, state)
        state_results = parse_state(state_url)
    
        # For every park in the state's page
        for park in state_results:
            # Transform the BeautifulSoup tag to a dictionary of park information
            park_result = parse_park(park, state)
            results.append(park_result)
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Each state park on the Vermont, Delaware, and Wisconsin pages have been recorded in a dictionary. All such dictionaries are stored in a list called results. This is a format that is easy to transform into a CSV.&lt;/p&gt;

&lt;h3&gt;Write list of dictionaries to CSV&lt;/h3&gt;
&lt;pre&gt;
  &lt;code&gt;
    import csv
    with open('export.csv', 'w', encoding='utf-8', newline='') as output_file:
        writer = csv.DictWriter(output_file, fieldnames=results[0].keys())
        writer.writeheader()
        writer.writerows(results)  
  &lt;/code&gt;
&lt;/pre&gt;

&lt;figure&gt;
  &lt;img src=&quot;/media/BeautifulSoup/Export.png&quot;&gt;
  &lt;figcaption&gt;Huzzah! A Comma Separated Values file!&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;BeautifulSoup is a great tool for pulling information from HTML files. Often, the questions that I want answered need a dataset that hasn't been organized so I should get used to building them myself.&lt;/p&gt;

&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.crummy.com/software/BeautifulSoup/bs4/doc/&quot;&gt;BeautifulSoup Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jchakko/BeautifulSoup&quot;&gt;GitHub Repository&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="blog" /><summary type="html">There is so much data available on the internet - even if it isn't always in an analysis friendly format. The results of any modern sports tournament are hosted somewhere. Countless blog posts and movie reviews are available to the public free of charge. This information can be extracted programmatically allowing researchers to build large datasets without tedious manual input.</summary></entry><entry><title type="html">Cleric Spells</title><link href="http://localhost:4000/blog/2020/05/06/Cleric_Spells.html" rel="alternate" type="text/html" title="Cleric Spells" /><published>2020-05-06T00:00:00-04:00</published><updated>2020-05-06T00:00:00-04:00</updated><id>http://localhost:4000/blog/2020/05/06/Cleric_Spells</id><content type="html" xml:base="http://localhost:4000/blog/2020/05/06/Cleric_Spells.html">&lt;p&gt;Clerics are awesome. They can fill many roles and playstyles from backline to the front. I had trouble finding my footing when I first started playing because I had some misconceptions about what a cleric should do. While clerics have the ability to heal it isn't a good use of tempo. On one turn I can heal about 8 HP which isn't helpful when my paladin is getting hit for 26 damage. Once I realized what the better spells are I realized how powerful clerics truly are.&lt;/p&gt;

&lt;h2&gt;Cantrips&lt;/h2&gt;
&lt;p&gt;Cantrips can be cast an unlimited number of times. They can't be changed so its very easy to get stuck with a bunch of bad ones. Even if thats the situation you're stuck in, eventually you'll get a 4th one and you can pick up Guidance. It's too powerful to pass up. Guidance lets people roll a d4 when doing an ability check. A lot of things require ability checks like jumping chasms, lockpicking, persuasion. I spam guidance out of combat because.&lt;/p&gt;

&lt;p&gt;I like the idea of Thaumaturgy but it rarely sees use. My DM Ricardo runs a flavorful campaign and I always look for opportunities to act a fool and even then its hard to find usage for it. Spare the Dying is outclassed by a level 1 spell called Healing Word. The last cantrip I have is Sacred Flame which is basically a normal hit.&lt;/p&gt;

&lt;h2&gt;Proaction Over Reaction&lt;/h2&gt;

&lt;p&gt;Like I said earlier, healing damage that has already been dealt is not a good use of time. Its better to prevent the damage from happening in the first place. This makes Bless a very powerful cleric spell. It grants 3 creatures an extra d4 dice on attack rolls and saving throws. Simply put it makes the party more accurate when attacking and more likely to avoid harmful effects. This spell stands head and shoulder over the other level one options for a few reasons. It works on 3 players, it doesn't have some prerequesite for the d4 to be rolled, and it does not disappear when the target attacks. Bless is so powerful that I build my strategy around this spell.&lt;/p&gt;

&lt;h2&gt;Focus Your Mind&lt;/h2&gt;

&lt;p&gt;There are a few different spell cast types. Bless is concentration. Concentration spells break when casting another concentration spell or failing a constitution save after taking damage. Since I want bless up all the time I stay strapped with non concentration spells. Some good options are Healing Word, Guiding Bolt, Inflict Wounds, Aid, and Sanctuary. Healing Word is as bonus action that can ressurect people from a distance. Guiding Bolt deals damage and makes the next hit against the same target more accurate. Inflict wounds is 3d10s of nectrotic damage and Aid gives a session long HP increase to multiple party members. Sanctuary makes an ally harder to hit which in theory can be combined with other dodge improvements to make a friend unhittable. Then there's Spiritual Weapon.&lt;/p&gt;

&lt;p&gt;Spiritual Weapon is a bonus cast spell that creats a floating, movable weapon as a bonus action. It only takes one spell slot to cast then it can be used to melee attack from long range as a bonus action. It does not interfere with Bless, its empowered by it. This combined with ordinary attacking puts out some real damage. It also makes playing more fun. My party does not have a strong front line. Discovering this spell made me realize that I can stand in the front and fight. After the mace comes the spiritual mace and with Bless, both are going to hit.&lt;/p&gt;

&lt;h2&gt;A Life Beyond Bless&lt;/h2&gt;

&lt;p&gt;Bless is not the end all be all Cleric spell. Even if it was it would get boring to cast all of the time. In future sessions I'm looking cast Silence and Spirit Guardians as soon as I get 3rd Level Spells. Silence wrecks other spellcasters because most spells have a speaking component. Spirit Guardians slows and batters enemies around the caster. There was a time when I healed as a Cleric, now I don't have the time.&lt;/p&gt;</content><author><name></name></author><category term="blog" /><summary type="html">Clerics are awesome. They can fill many roles and playstyles from backline to the front. I had trouble finding my footing when I first started playing because I had some misconceptions about what a cleric should do. While clerics have the ability to heal it isn't a good use of tempo. On one turn I can heal about 8 HP which isn't helpful when my paladin is getting hit for 26 damage. Once I realized what the better spells are I realized how powerful clerics truly are.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/media/D3_Maps/Manhattan.png" /><media:content medium="image" url="http://localhost:4000/media/D3_Maps/Manhattan.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Automating the Pipeline for a Slowly Evolving Network</title><link href="http://localhost:4000/blog/2020/04/12/Automating_Network_Pipline.html" rel="alternate" type="text/html" title="Automating the Pipeline for a Slowly Evolving Network" /><published>2020-04-12T00:00:00-04:00</published><updated>2020-04-12T00:00:00-04:00</updated><id>http://localhost:4000/blog/2020/04/12/Automating_Network_Pipline</id><content type="html" xml:base="http://localhost:4000/blog/2020/04/12/Automating_Network_Pipline.html">&lt;figure&gt;
  &lt;img src=&quot;/media/D3_Maps/Germany_Roads.png&quot;&gt;
&lt;/figure&gt;

&lt;h2&gt;Piece of Me&lt;/h2&gt;

&lt;p&gt;Update the adjacency list&lt;/p&gt;
&lt;p&gt;Create the new layout using Gephi&lt;/p&gt;
&lt;p&gt;Add new nodes to data.json&lt;/p&gt;
&lt;p&gt;Add new links to data.json&lt;/p&gt;
&lt;p&gt;Use D3 to drag and drop new layout&lt;/p&gt;
&lt;p&gt;Use SVG element to update data.json&lt;/p&gt;
     
&lt;a href=&quot;https://github.com/jchakko/Ultimate_Finals&quot;&gt;Skid&lt;/a&gt;</content><author><name></name></author><category term="blog" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/media/D3_Maps/Germany_Roads.png" /><media:content medium="image" url="http://localhost:4000/media/D3_Maps/Germany_Roads.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Let’s Natural Language Process an Agglutinative Language</title><link href="http://localhost:4000/blog/2020/03/15/D3_Malayalam_Word_Frequency.html" rel="alternate" type="text/html" title="Let's Natural Language Process an Agglutinative Language" /><published>2020-03-15T00:00:00-04:00</published><updated>2020-03-15T00:00:00-04:00</updated><id>http://localhost:4000/blog/2020/03/15/D3_Malayalam_Word_Frequency</id><content type="html" xml:base="http://localhost:4000/blog/2020/03/15/D3_Malayalam_Word_Frequency.html">&lt;figure&gt;
  &lt;img src=&quot;/media/D3_Maps/Germany_Roads.png&quot;&gt;
&lt;/figure&gt;

&lt;h2&gt; &lt;/h2&gt;

&lt;p&gt;D3.js is a powerful data visualization library that displays graphics right in your browser. It can consume geographic information which is widely available these days. With some additional data, D3 can make compelling geovisualizations like choropleths, and dot density maps.&lt;/p&gt;

&lt;h2&gt;Preparing the Data&lt;/h2&gt;

&lt;p&gt;There is a lot of spatial data that is free to use on the internet. For this post I am using the free country level data provided by &lt;a href=&quot;https://www.diva-gis.org/gdata&quot;&gt;DIVA-GIS.&lt;/a&gt; Spatial data is often separated into a few components then compressed into a zip file. D3 cannot work with the data in this format.&lt;/p&gt;

&lt;p&gt;Thankfully there are tools online that convert spatial data zip files to GeoJSON, a format that is D3 friendly. My go to is &lt;a href=&quot;https://mapshaper.org/&quot;&gt;Mapshaper&lt;/a&gt;. Import the entire zip file. Mapshaper has a simplify feature which makes the file smaller but the lines less precise. I like to play with it and pretend I'm making minimalist art or something. Anyways when you're finished export the data as a GeoJSON file.&lt;/p&gt;

&lt;h2&gt;Display the Spatial Data&lt;/h2&gt;   

&lt;p&gt;Projections make it possible to display a 3D object on a 2D surface. There are a handful of projections each with their strengths and differences. GeoJSON coordinates can be transformed by a projection function then displayed using a line generator.&lt;/p&gt;
     
&lt;a href=&quot;https://github.com/jchakko/Ultimate_Finals&quot;&gt;Get the GML file from my Git Hub&lt;/a&gt;</content><author><name></name></author><category term="blog" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/media/D3_Maps/Germany_Roads.png" /><media:content medium="image" url="http://localhost:4000/media/D3_Maps/Germany_Roads.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Solving the Mystery with Network Science</title><link href="http://localhost:4000/blog/2020/03/15/D3_Network.html" rel="alternate" type="text/html" title="Solving the Mystery with Network Science" /><published>2020-03-15T00:00:00-04:00</published><updated>2020-03-15T00:00:00-04:00</updated><id>http://localhost:4000/blog/2020/03/15/D3_Network</id><content type="html" xml:base="http://localhost:4000/blog/2020/03/15/D3_Network.html">&lt;p&gt;Image here&lt;/p&gt;

&lt;p&gt;I am prefacing this post by saying this is all from the Dungeons and Dragons campaign I am playing and not in real life. Someone blew up the side of the tavern I sleep at and killed about a dozen people in the process. I had my doubts that the city's law enforcement would be able to handle this case so I took it into my own hands. The main question is who did this? Waterdeep is a big city with a colorful cast of characters. They have friendly and strained relations with each other. &lt;/p&gt;

&lt;p&gt;A great way to visualize how all of this connects is to create a graph. There are two data types in a graph file: nodes and edges. Nodes are an entity like a person or an organization. There is an edge between two nodes if there is a connection between them. I feel like there is a lack of graph files which is a shame because they are fun to use and easy to create. I wrote one from scratch for the purpose of this visualization.&lt;/p&gt;

&lt;p&gt;The straightforward way to build a graph is with an adjacency list. This is typically a two column format where every pair of entries are nodes connected by an edge. Adjacency lists can be imported by popular graph analysis tools like Gephi and NetworkX and exported as a standard graph file format. I wanted the output to be easily sharable so I opted to use D3.js, a browser based visualization library.&lt;/p&gt;

&lt;p&gt;As with all new D3 visualizations there was trial and error in discovering the intended data input format.&lt;/p&gt;

&lt;p&gt;D3 has graph capabilities but it seems like it is intended to display data that has already been organized and finalized.&lt;/p&gt;

     
&lt;a href=&quot;https://github.com/jchakko/Ultimate_Finals&quot;&gt;Stock Text&lt;/a&gt;</content><author><name></name></author><category term="blog" /><summary type="html">Image here</summary></entry><entry><title type="html">The Yahoo Answers Analysis That Nobody Asked For</title><link href="http://localhost:4000/blog/2020/02/15/LDA_Viz.html" rel="alternate" type="text/html" title="The Yahoo Answers Analysis That Nobody Asked For" /><published>2020-02-15T00:00:00-05:00</published><updated>2020-02-15T00:00:00-05:00</updated><id>http://localhost:4000/blog/2020/02/15/LDA_Viz</id><content type="html" xml:base="http://localhost:4000/blog/2020/02/15/LDA_Viz.html">&lt;p&gt;LDA PIC HERE&lt;/p&gt;

&lt;p&gt;Oh Yahoo Answers. The home of calculus students looking for the answers to the odd numbered problems in the textbook and people trying to understand the miracle of life. Its a gaze into the national consciousness. I wanted to see what the askers of this website are wondering so I decided to build a dataset and do some exploratory data analysis.&lt;/p&gt;

&lt;h2&gt;Building the Dataset&lt;/h2&gt;
&lt;p&gt;The first step is to build a dataset containing thousands of questions at least. I accomplished this with a Python script that acesses the Yahoo api and pulls the ten most recent answers. I converted the script into an exe file and scheduled it to run every hour  with Task Scheduler. The script appends the reuslts of the query to a csv file and after a few months I had enough entries to begint he analysis. MORE INFO HERE&lt;/p&gt;

&lt;p&gt;The first idea was to do a simple frequency distribution based on the category of question. This won't be completely accurate because questions are sometimes listed under an unrelated category. I can already tell you that the most common categories will be politics and religion, two topics that Yahoo Answers is completely unprepared to handle so of course its going to happen constantly.&lt;/p&gt;

&lt;p&gt;Adding to the frequency distribution, I can find the most common words that appear in each category. There is an unsupervised machine learning algorithm that does something like this. Its called Latent Dirichlet Allocation, a technique created by David Blei, Andrew Ng, and Michael Jordan. Yes, that Andrew Ng, but no not that Michael Jordan. You can find the original paper HERE http://www.jmlr.org/papers/volume3/blei03a/blei03a.pdf&lt;/p&gt;

&lt;p&gt;The algorithm has one main hyperparamter, the number of categories it should create. Based on that value, LDA groups documents into topics by word usage. Each topic is composed of words that occur together in documents and that are not prevalant in other documents. There are many implementations of LDA. I decided to use the one from Gensim LINK HERE.&lt;/p&gt;

&lt;p&gt;Each question is stored as an entry in a CSV file and read into a list. Here's a quick rundown of the preprocessing. Every document is converted into lower case and tokenized using the NLTK. The list is then transformed into a Gensim Dictionary. These dictionaries have a function that removes words that appear rarely or frequently which minimizes random noise. Finally, a corpus is created by creating a bag-of-words representation of the documents.&lt;/p&gt;

&lt;p&gt;Alright, time to train the model. Besides choosing a number of topics, the input is knowing what parameters the model accepts. I've linked a viewable version of the final model HERE. After the model runs it can print the top topics. From the preliminary results, the topics are full of stop words with some distinct references to politics and religion. Called it. Hopefully the model will perform better after I filter out the stop words using a simple list comprehension.&lt;/p&gt;

&lt;p&gt;I enjoyed seeing the topics became more interpretable as I filtered out more stop words. Almost every topic had some political aspect to it which makes sense since its the most common type of question to ask. &lt;/p&gt;
     
&lt;a href=&quot;https://github.com/jchakko/Ultimate_Finals&quot;&gt;Get the GML file from my Git Hub&lt;/a&gt;</content><author><name></name></author><category term="blog" /><summary type="html">LDA PIC HERE</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/media/D3_Maps/Germany_Roads.png" /><media:content medium="image" url="http://localhost:4000/media/D3_Maps/Germany_Roads.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Create A Network Dataset</title><link href="http://localhost:4000/blog/2020/02/03/Create_A_Network_Dataset-Copy.html" rel="alternate" type="text/html" title="Create A Network Dataset" /><published>2020-02-03T00:00:00-05:00</published><updated>2020-02-03T00:00:00-05:00</updated><id>http://localhost:4000/blog/2020/02/03/Create_A_Network_Dataset%20-%20Copy</id><content type="html" xml:base="http://localhost:4000/blog/2020/02/03/Create_A_Network_Dataset-Copy.html">&lt;figure&gt;
  &lt;img src=&quot;/media/Ultimate_Finals/GrandFinals_Network2.png&quot;&gt;
&lt;/figure&gt;

&lt;h3&gt;Network datasets create awesome visualizations. I like seeing the networks created by characters in books and TV shows. When I first started looking for datasets I found they were hard to come by. This is probably because determining what counts as a connection between characters is difficult. Mechanically the only thing to do is create a CSV file where characters that are connected appear on the same row. But to consume the media and attempt to record all the interactions between characters would be painful and probably make you dislike the show you were trying to visualize in the first place.&lt;/h3&gt;

&lt;h3&gt;I think the challenge comes from finding preexisting data that is suitable to be transformed into a network. One of the 'Hello World' networks to analyze is the Les Misérables (pronounce it like lay miz-er-ah) dataset. The principle behind the network creation is simple. If two characters appear in the same chapter, they are given an edge. This simplifies a lot because its possible for a machine to do this computation. Now, there may be connections between two characters who never interact if they happen to be in the same chapter. This is a necessary tradeoff because its too difficult to judge what counts as an interaction.&lt;/h3&gt;

&lt;h3&gt;My first idea was to create a network of Star Wars. I couldn't get my footing. The problem was there is no unified collection of Star Wars characters. Looking up characters I already know about is easy but to find characters that I don't know was too difficult. If I only used the movies as separators there would not be enough of them to draw interesting distinctions. The second idea was to do The Office. Separating by episode isn't strict enough but I did find a website that groups interactions by scene. I ended up not doing this because there weren't enough characters and the characters interact with each other far too often.&lt;/h3&gt;

&lt;h3&gt;So to create a good network we need a lot of separations and a lot of characters. This led me to the anime Naruto which I watched a lot in middle school. Despite watching it a lot I didn't get very far. Thanks to the pace new episodes were broadcasted over the course of 2 years I made it to episode 70 or so and there are 500 in total. Anyways this fits the criteria because there are hundreds of characters and hundreds of separations. I easily found a listing of episodes from Narutopedia. I wrote a web scraper that visits each page and grans the characters listed in the credits. Let me not gloss over that part, the credit listing on each episode was the make or break for this project. I originally started working with the Manga which also has an webpage for each chapter but there was no simple way for me to determine which characters appeared in each chapter.&lt;/h3&gt;

&lt;h3&gt;The web scraper created put the credits for each episode in a list. I then used itertools to create combinations for each list. Finally I wrote them into a csv to be loaded by Gephi. Overall the coding was not too dificult because the information was already stored in a format that could be transformed into the csv file. If I stuck with the manga I would have had to parse the chapter summaries and extract the character names.&lt;/h3&gt;    
    
    
&lt;a href=&quot;https://github.com/jchakko/Ultimate_Finals&quot;&gt;Get the GML file from my Git Hub&lt;/a&gt;</content><author><name></name></author><category term="blog" /><summary type="html"></summary></entry><entry><title type="html">Render Maps in Browser Using D3.JS</title><link href="http://localhost:4000/blog/2020/01/15/D3_Maps.html" rel="alternate" type="text/html" title="Render Maps in Browser Using D3.JS" /><published>2020-01-15T00:00:00-05:00</published><updated>2020-01-15T00:00:00-05:00</updated><id>http://localhost:4000/blog/2020/01/15/D3_Maps</id><content type="html" xml:base="http://localhost:4000/blog/2020/01/15/D3_Maps.html">&lt;figure&gt;
  &lt;img src=&quot;/media/D3_Maps/Switzerland.png&quot;&gt;
&lt;/figure&gt;

&lt;h2&gt;Welcome to GIS&lt;/h2&gt;

&lt;p&gt;Spatial data is becoming all the rage. There's been plenty of research done on Geographic Information System (GIS) and the data is becoming more publicly available. Cities are incresingly making their spatial data available for free to anyone who can access their websites. This data can be used by D3 to create interactive maps that are easily sharable.&lt;/p&gt;

&lt;h2&gt;Preparing the Data&lt;/h2&gt;

&lt;p&gt;For this post I am using the free country level data provided by &lt;a href=&quot;https://www.diva-gis.org/gdata&quot;&gt;DIVA-GIS.&lt;/a&gt; Spatial data is often separated into a few components then compressed into a zip file. D3 cannot work with the data in this format. Thankfully there are tools online that convert spatial data zip files to GeoJSON, a format that is D3 friendly. My go to is &lt;a href=&quot;https://mapshaper.org/&quot;&gt;Mapshaper&lt;/a&gt;. Import the entire zip file. Mapshaper has a simplify feature which makes the file smaller but the lines less precise. I like to play with it and pretend I'm making minimalist art or something. Anyways when you're finished export the data as a GeoJSON file.&lt;/p&gt;

&lt;h2&gt;Display the Spatial Data&lt;/h2&gt;   

&lt;p&gt;Projections make it possible to display a 3D object on a 2D surface. There are a handful of projections each with their strengths and weaknesses. GeoJSON coordinates can be transformed by a projection function then drawn using a line generator. I created a template that can take GeoJSON data and render a map with Mercator projection.&lt;/p&gt;

&lt;a href=&quot;https://bl.ocks.org/jchakko/ecd02b26162df338128c5b455e58c074&quot;&gt;Check out the code here&lt;/a&gt;

&lt;h2&gt;The Application&lt;/h2&gt;

&lt;p&gt;This was a lot of work to look at a map of Switzerland but it's only the foundation. The key power behind D3 is interactivity and binding data to elements. Depending on the data I can color in regions of the map, mark the locations of major cities, and react to user mouse activity. Its very manual but allows for some truly compelling visualizations.&lt;/p&gt;

&lt;h2&gt;The Art of Not Taking Notes&lt;/h2&gt;

&lt;p&gt;I joined a Call of Cthullu campaign as if I don't spend enough time role playing already. One aspect of the game I appreciate is how its based on real locations; after a quick stint in Peru and a time skip my party ends up in New York. I wanted a visual way to keep track of our progres and decided to go with marking the locations we've visited on a D3 map.&lt;/p&gt;

&lt;h2&gt;Making The Map&lt;/h2&gt;

&lt;p&gt;The first step was to find an appropriate GeoJSON of Manhattan. NYC OpenData has a lot of publicly available GIS files including the&lt;a href= &quot;https://data.cityofnewyork.us/City-Government/Neighborhood-Tabulation-Areas-NTA-/cpf4-rkhq&quot;&gt; Neighborhood Tabulation Areas&lt;/a&gt; This draws the visualization I want but also every other borough in New York. To subset the spatial file I used &lt;a href= &quot;https://geopandas.org/&quot;&gt;GeoPandas&lt;/a&gt;. The library lets me import the spatial file as a dataframe. After a quick peek at the metadata I selected only the rows that contain Manhattan's borough code and exported the selection to a JSON file.&lt;/p&gt;

&lt;p&gt;Now that the map is up, I need to create markings on the map to show where the team has visited. Evidently the Cthullu handbook has the intersections for each place of interest and my patient Keeper Andriy passed it along to me. Call of Cthullu is in the 1920's so some of the street names have changed. Still, when I pass the information into Google Maps it takes it like a champ and gives me the coordinate information back. I apply the projection function to the coordinates and plot the output on top of the map of Manhattan.&lt;/p&gt;

&lt;h2&gt;I jotted a few key facts&lt;/h2&gt;
&lt;p&gt;The map needed some additional information to explain the relevance of the marked points. I added a mouseover effect that displays a tooltip with the name of the location, the game provided address, and quick description of what we did there. Adding points to the map gives the story a feeling of progression.&lt;/p&gt;

&lt;a href=&quot;https://github.com/jchakko/D3_Manhattan&quot;&gt;GitHub Repo&lt;/a&gt;

&lt;h2&gt;Choropleths and Cenus Data&lt;/h2&gt;

&lt;p&gt;One of the most common forms of geographic data is census information. It can show how different parts of a region think, feel, and behave about a myriad of topics. A powerful way to convey this information is with a Choropleth. This visualization colors in sections of a map based on the data provided. I got my hands on census data from India to settle a very important question. Who's eating rice and who's eating roti?&lt;/p&gt;

&lt;p&gt;The census had a section about the per capita rice and wheat consumption in every state of India. I extracted the data to a CSV file and found an accompanying GeoJSON file. Its important that the number of entries in both files are the same so D3 knows where to color. With some simple arithmatic and color scales I created a map thats more green when a state eats rice and more saffron when roti is the carb of choice. Mousing over a state shows the original information.&lt;/p&gt;

&lt;h2&gt;What else?&lt;/h2&gt;

&lt;p&gt;These examples are so random which shows&lt;/p&gt;</content><author><name></name></author><category term="blog" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/media/D3_Maps/Switzerland.png" /><media:content medium="image" url="http://localhost:4000/media/D3_Maps/Switzerland.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>